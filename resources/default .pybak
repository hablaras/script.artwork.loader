#import modules
import os
import sys
import xbmc
import xbmcaddon
import xbmcgui
import xbmcvfs
import time
import lib.common
import lib.utils
# import lib.fileops as fileops
from media_setup import _media_listing as media_listing
# from lib.media_setup import _media_unique as media_unique
from traceback import print_exc

THUMBS_CACHE_PATH = xbmc.translatePath( "special://profile/Thumbnails/Video" )

# log to kodi log if log setting is true
def log( txt ):
    if (addon.getSetting("log_enabled")):
    	xbmc.log( txt )
    return

# retrieve cache filename
def get_cached_thumb(filename):
    if filename.startswith("stack://"):
        filename = strPath[ 8 : ].split(" , ")[ 0 ]
    if filename.endswith("folder.jpg"):
        cachedthumb = xbmc.getCacheThumbName(filename)
        thumbpath = os.path.join( THUMBS_CACHE_PATH, cachedthumb[0], cachedthumb ).replace( "/Video" , "")
    else:
        cachedthumb = xbmc.getCacheThumbName(filename)
        if ".jpg" in filename:
            cachedthumb = cachedthumb.replace("tbn" ,"jpg")
        elif ".png" in filename:
            cachedthumb = cachedthumb.replace("tbn" ,"png")      
        thumbpath = os.path.join( THUMBS_CACHE_PATH, cachedthumb[0], cachedthumb ).replace( "/Video" , "")    
    return thumbpath
    
# erase old cache file and copy new one
def erase_current_cache(filename):
    try: 
        cached_thumb = get_cached_thumb(filename)
        log( "Cache file %s" % cached_thumb )
        if xbmcvfs.exists( cached_thumb.replace("png" , "dds").replace("jpg" , "dds") ):
            xbmcvfs.delete( cached_thumb.replace("png" , "dds").replace("jpg" , "dds") )
        copy = xbmcvfs.copy( filename , cached_thumb )
        if copy:
            log("Cache succesful")
        else:
            log("Failed to copy to cached thumb")
    except :
        print_exc()
        log("Cache erasing error")

addon = xbmcaddon.Addon()
addonname = addon.getAddonInfo('name')

# xbmcgui.Dialog().ok(addonname, line1, line2, line3)
p = xbmcgui.DialogProgress()
p.create("Start parsing clearlogos for movies")

p.update(75, "Debug: " + addon.getSetting("debug_enabled"))
time.sleep(1)

# get list of logos from folder
# path = "c:/tmp/logo"
# files = os.listdir(path)
# This would print all the files and directories
# itemcount = 0
# itemtotal = len(files)
# for file in files:
#     time.sleep(.1) # delays for 1 seconds
#     itemcount +=1 
#     p.update(itemcount/itemtotal, str(itemcount) + ": " + file + ", path: " + path)

# get list of movies from kodi
mediaList = media_listing("movie") 

itemcount = 0
itemtotal = len(mediaList)

p.update(1, "Parse # of movies: " + str(itemtotal))
time.sleep(1) # delays for 1 seconds

locallogo = ""
# fo = fileops.fileops()

for item in mediaList:
    # time.sleep(0.002) # delays for 1 seconds
    itemcount +=1 
    # if ( item['art'].has_key('clearlogo') ):
    #     locallogo = item['art']['clearlogo']
    #     p.update(itemcount/itemtotal, str(itemcount) + ": " + item['name'] + ", path: " + str(item['path']) + ", clearlogo IN DATABASE: " + locallogo)
    #     # time.sleep(.5)
    # else:
    # create clearlogo filename
    locallogo = ('.').join(item['file'].split('.')[:-1]) + "-logo.png"
    locallogo_url = locallogo.replace("\\","\\\\")
    if ( os.path.isfile(locallogo) ):
        p.update(100*itemcount/itemtotal, str(itemcount) + ": " + item['name'] + ", path: " + str(item['path']), "ADD: " + locallogo)
        # add local logo to kodi database
        xbmc.executeJSONRPC('{"jsonrpc": "2.0", "method": "VideoLibrary.SetMovieDetails", "params": { "movieid": %i, "art": { "%s": "%s" }}, "id": 1 }' %(item['dbid'], "clearlogo", locallogo_url))
        # refresh kodi thumbnail to be sure a different local logo with the same name gets put in that cache 
        thumb = get_cached_thumb(locallogo)
        erase_current_cache(locallogo)
        p.update(100*itemcount/itemtotal, "Refreshed thumb: " + thumb)
        time.sleep(2)
    #elif ( item['art'].has_key('clearlogo') and "http://" not in item['art']['clearlogo'] ):
    #	# clear existing logo from database if it no longer exists on disk
    #	xbmc.executeJSONRPC('{"jsonrpc": "2.0", "method": "VideoLibrary.SetMovieDetails", "params": { "movieid": %i, "art": { "%s": null }}, "id": 1 }' %(item['dbid'], "clearlogo"))
    #    p.update(100*itemcount/itemtotal, str(itemcount) + ": " + item['name'] + ", path: " + str(item['path']), "REMOVED : " + item['art']['clearlogo'] )
    #    time.sleep(.3)
    else:
        p.update(100*itemcount/itemtotal, str(itemcount) + ": " + item['name'] + ", path: " + str(item['path']), "NOT FOUND: " + locallogo)
        # time.sleep(.005)
        
time.sleep(1) # delays for 1 seconds

p.update(100, "Done!", " ")

time.sleep(1) # delays for 1 seconds
p.close